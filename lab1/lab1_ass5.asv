% TSRT78, Lab 1: Fundamental Signal Processing
% Matheus Bernat (matvi959) & Caspian SÃ¼sskind (cassu286)

% ===================== 5 Assignment: Vowel ============================

% ------------------ INTRO ------------------
clear;
% --------------- Read wav file: extract data and sampling frequency
x = audioread('aaaaa.wav'); 
y = audioread('ooooo.wav'); 
fs = 8000;
Nx = size(x,1);
Ny = size(y,1); 
x = detrend(x);
y = detrend(y);
% --------------- Plot signal in time axis
Ts = 1/fs;
tx = Ts*(0:Nx-1); % time vector in seconds
ty = Ts*(0:Ny-1); % time vector in seconds

figure(1);clf();
subplot(2,1,1); plot(tx, x); xlabel('time [s]'); ylabel('x[t]');
subplot(2,1,2); plot(ty, y); xlabel('time [s]'); ylabel('y[t]');

% --------------- Get the 2 most consistent seconds of both signals
idx_x = (tx >= 1) & (tx <= 3); x = x(idx_x);
idx_y = (ty >= 2) & (ty <= 4); y = y(idx_y);

Nx = size(x, 1); tx = Ts*(0:Nx-1);
Ny = size(y, 1); ty = Ts*(0:Ny-1);

figure(2);clf();
subplot(2,1,1); plot(tx, x); xlabel('time [s]'); ylabel('x[t]'); 
subplot(2,1,2); plot(ty, y); xlabel('time [s]'); ylabel('y[t]');

% --------------- Plot frequency content, count peaks to get model order
X = fft(x);
Y = fft(y);
fx = (0:Nx-1)*fs/Nx;
fy = (0:Ny-1)*fs/Ny;
figure(3); clf();
subplot(2,1,1); plot(fx, abs(X)); % Order of AR model should be 14*2 = 28
xlabel('frequency [Hz]'); ylabel('X[f]');
title('Frequency spectrum for a')
subplot(2,1,2); plot(fy, abs(Y)); % Order of AR model should be 6*2 = 12
xlabel('frequency [Hz]'); ylabel('Y[f]');
title('Frequency spectrum for o')

% --------------- Model order estimation with loss/AIC/BIC
figure(45);
subplot(2,1,1);
maxOrder = 50;
arorder(x, 50);
legend('Minimal loss function',...
       'Akaikes information criterion (AIC)',...
       'Akikes information criterion B (BIC)');
title('Order selection analysis of vowel a');
xlabel('Model order');
subplot(2,1,2);
arorder(y, 50);
legend('Minimal loss function',...
       'Akaikes information criterion (AIC)',...
       'Akikes information criterion B (BIC)');
title('Order selection analysis of vowel o');
xlabel('Model order');

%% --------------- Create AR models

% AR models for vowel 'a' of orders 2, 9 and 18
estIdx_x = floor(2*Nx/3);
modelOrder_x = 2;
arMod_x_2 = ar(x(1:estIdx_x), modelOrder_x, 'Ts', Ts);
modelOrder_x = 9;
arMod_x_9 = ar(x(1:estIdx_x), modelOrder_x, 'Ts', Ts);
modelOrder_x = 18;
arMod_x_18 = ar(x(1:estIdx_x), modelOrder_x, 'Ts', Ts);

% AR models for vowel 'o' of orders 2, 5 and 10
estIdx_y = floor(2*Ny/3);
modelOrder_y = 2;
arMod_y_2 = ar(y(1:estIdx_y), modelOrder_y, 'Ts', Ts);
modelOrder_y = 5;
arMod_y_5 = ar(y(1:estIdx_y), modelOrder_y, 'Ts', Ts);
modelOrder_y = 10;
arMod_y_10 = ar(y(1:estIdx_y), modelOrder_y, 'Ts', Ts);


%% ------------------ Simulation of model ------------------
b = 1;
ax = arMod_x.A; % coefficients of the AR-model
ay = arMod_y.A;

pulseTrain = ones(1, Nx);

e = filter(ax, 1, x);
r = covf(e, 100);
[A, D] = max(r(20:end));
D = D + 19; % Look at max from t>19, so add 19 to time lag
ehat = (mod(1:Nx, D) == 0);
sim_x = filter(1,ax,ehat);

e = filter(ay, 1, y);
r = covf(e, 100);
[A, D] = max(r(20:end));
D = D + 19; % Look at max from t>19, so add 19 to time lag
ehat = (mod(1:Ny, D) == 0);
sim_y = filter(1,ay,ehat);

sim_X = fft(sim_x);
sim_Y = fft(sim_y);

sound([sim_x, sim_y]);


%% ------------------ Validation of model ------------------

% Validation method 1: compare power spectra
figure;
subplot(2,1,1);
bode(etfe(iddata(x(estIdx_x+1:end),[],Ts)));
bode(arMod_x); 
hold on; 

title('Validation plot for a');



subplot(2,1,2);
bode(arMod_y); hold on; bode(etfe(iddata(y(estIdx_y+1:end),[],Ts)));
title('Validation plot for o');

%% Validation method 2: residual whiteness test
eps = pe(arMod_x, x(estIdx_x+1:end)); 
figure;
scatter(1:length(eps), eps); x('\epsilon index'); ylabel('\epsilon'); title('Epsilon plot for a');
figure;
qqplot(eps); % See if the error is normally distributed
title('Quantiles of data vs quantiles in normal distribution for a')

% Get residuals. pe gives us the prediction errors
eps = pe(arMod_y, y(estIdx_y+1:end)); 
figure; 
scatter(1:length(eps), eps); x('\epsilon index'); ylabel('\epsilon'); title('Epsilon plot for o');
figure;
qqplot(eps); 
title('Quantiles of data vs quantiles in normal distribution for o')





